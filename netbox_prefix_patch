From 219d24274ffb3bdd7387252559a32e49470fbb3c Mon Sep 17 00:00:00 2001
From: Simon Gurney <simongurney@outlook.com>
Date: Tue, 6 Aug 2019 08:55:49 +0100
Subject: [PATCH 1/2] Added support for /32 and /128 prefixes

---
 .gitignore            |  2 ++
 netbox/ipam/models.py | 18 ++++++------------
 netbox/ipam/views.py  |  2 +-
 3 files changed, 9 insertions(+), 13 deletions(-)

diff --git a/netbox/ipam/models.py b/netbox/ipam/models.py
index 373128a8f..58077594a 100644
--- a/netbox/ipam/models.py
+++ b/netbox/ipam/models.py
@@ -346,16 +346,6 @@ def clean(self):
 
         if self.prefix:
 
-            # Disallow host masks
-            if self.prefix.version == 4 and self.prefix.prefixlen == 32:
-                raise ValidationError({
-                    'prefix': "Cannot create host addresses (/32) as prefixes. Create an IPv4 address instead."
-                })
-            elif self.prefix.version == 6 and self.prefix.prefixlen == 128:
-                raise ValidationError({
-                    'prefix': "Cannot create host addresses (/128) as prefixes. Create an IPv6 address instead."
-                })
-
             # Enforce unique IP space (if applicable)
             if (self.vrf is None and settings.ENFORCE_GLOBAL_UNIQUE) or (self.vrf and self.vrf.enforce_unique):
                 duplicate_prefixes = self.get_duplicates()
@@ -423,6 +413,10 @@ def get_child_ips(self):
         Return all IPAddresses within this Prefix and VRF. If this Prefix is a container in the global table, return
         child IPAddresses belonging to any VRF.
         """
+        if self.prefix.prefixlen == 32:
+            return IPAddress.objects.filter(vrf=self.vrf, address__net_host=str(self.prefix.cidr))
+        if self.prefix.prefixlen == 128:
+            return IPAddress.objects.filter(vrf=self.vrf, address__net_host=str(self.prefix.cidr))
         if self.vrf is None and self.status == PREFIX_STATUS_CONTAINER:
             return IPAddress.objects.filter(address__net_host_contained=str(self.prefix))
         else:
@@ -452,9 +446,9 @@ def get_available_ips(self):
 
         # All IP addresses within a point-to-point prefix (IPv4 /31 or IPv6 /127) are considered usable
         if (
-            self.family == 4 and self.prefix.prefixlen == 31  # RFC 3021
+            self.family == 4 and self.prefix.prefixlen >= 31  # RFC 3021
         ) or (
-            self.family == 6 and self.prefix.prefixlen == 127  # RFC 6164
+            self.family == 6 and self.prefix.prefixlen >= 127  # RFC 6164
         ):
             return available_ips
 
diff --git a/netbox/ipam/views.py b/netbox/ipam/views.py
index d80646bb0..2eae12563 100644
--- a/netbox/ipam/views.py
+++ b/netbox/ipam/views.py
@@ -649,7 +649,7 @@ def get(self, request, pk):
 
         # Parent prefixes table
         parent_prefixes = Prefix.objects.filter(
-            vrf=ipaddress.vrf, prefix__net_contains=str(ipaddress.address.ip)
+            vrf=ipaddress.vrf, prefix__net_contains_or_equals=str(ipaddress.address.ip)
         ).select_related(
             'site', 'role'
         )

From 0781dc4435e84a103178e1a10ee5fadef4fc9572 Mon Sep 17 00:00:00 2001
From: SimonGurney <simongurney@outlook.com>
Date: Thu, 8 Aug 2019 23:47:22 +0100
Subject: [PATCH 2/2] Update models.py

Adjusted so an aggregate completely filled by a child prefix will get util from the child > child prefixes.  A full scope child prefix is essential to find free space in the aggregate via the API
---
 netbox/ipam/models.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/netbox/ipam/models.py b/netbox/ipam/models.py
index 58077594a..79100e5cd 100644
--- a/netbox/ipam/models.py
+++ b/netbox/ipam/models.py
@@ -216,7 +216,7 @@ def get_utilization(self):
         """
         Determine the prefix utilization of the aggregate and return it as a percentage.
         """
-        queryset = Prefix.objects.filter(prefix__net_contained_or_equal=str(self.prefix))
+        queryset = Prefix.objects.filter(prefix__net_contained=str(self.prefix))
         child_prefixes = netaddr.IPSet([p.prefix for p in queryset])
         return int(float(child_prefixes.size) / self.prefix.size * 100)
 
From 35c373aff1c64b0d9ce5a2bddc1b2f943925b1b0 Mon Sep 17 00:00:00 2001
From: SimonGurney <simongurney@outlook.com>
Date: Wed, 4 Sep 2019 09:56:16 +0100
Subject: [PATCH 3/3] Modified the prefix contained filter to include /32 and
 /128 prefixes

---
 netbox/ipam/filters.py | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/netbox/ipam/filters.py b/netbox/ipam/filters.py
index 49c547d2d..c2bf4f089 100644
--- a/netbox/ipam/filters.py
+++ b/netbox/ipam/filters.py
@@ -237,7 +237,7 @@ def search_contains(self, queryset, name, value):
                 return queryset.filter(prefix__net_contains_or_equals=str(netaddr.IPNetwork(value).cidr))
             # Searching by IP address
             else:
-                return queryset.filter(prefix__net_contains=str(netaddr.IPAddress(value)))
+                return queryset.filter(prefix__net_contains_or_equals=str(netaddr.IPAddress(value)))
         except (AddrFormatError, ValueError):
             return queryset.none() 


